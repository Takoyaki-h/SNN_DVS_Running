import torch.nn as nn
from models.LIFNeuron import LIF
# from models.DropLIFNeuron import DropLIF, DDLIF
from models.Neurons import VEILIF, MVLIF, MVALIF, MALIF, CMLIF, CMVLIF, CMILIF, CMIVLIF, CMSLIF, CMSVLIF, SAMLIF, \
    DropBlockLIF, DBLIF, WTALIF, LIF, AVGMaskLIF,AVGConMLIF


class VGG9(nn.Module):
    def __init__(self, num_classes):
        super(VGG9, self).__init__()
        self.avgpool_input = nn.AvgPool2d(kernel_size=4, stride=4)
        self.feature = nn.Sequential(
            nn.Conv2d(2, 64, 3, 1, 1, bias=False),
            nn.BatchNorm2d(64),
            # LIF(),
            # DropLIF(),
            # CMILIF(64),
            # CMIVLIF(64),
            # CMLIF(64),
            # CMVLIF(64),
            # CMSLIF(64),
            # CMSVLIF(64),
            # SAMLIF(64),
            # MVALIF(inchannel=64),
            # MVLIF(inchannel=64),
            # VEILIF(inchannel=64),
            # DDLIF(),
            # MALIF(),
            DropBlockLIF(),
            # DBLIF(),
            # WTALIF(),
            # AVGConMLIF(inchannel=64),
            nn.Conv2d(64, 128, 3, 1, 1, bias=False),
            nn.BatchNorm2d(128),
            # LIF(),
            # DropLIF(),
            # CMILIF(128),
            # CMIVLIF(128),
            # CMLIF(128),
            # CMVLIF(128),
            # CMSLIF(128),
            # CMSVLIF(128),
            # SAMLIF(128),
            # MVALIF(inchannel=128),
            # MVLIF(inchannel=128),
            # VEILIF(inchannel=128),
            # DDLIF(),
            # MALIF(),
            DropBlockLIF(),
            # DBLIF(),
            # WTALIF(),
            # AVGConMLIF(inchannel=128),
            nn.AvgPool2d(2),

            nn.Conv2d(128, 256, 3, 1, 1, bias=False),
            nn.BatchNorm2d(256),
            # LIF(),
            # DropLIF(),
            # CMILIF(256),
            # CMIVLIF(256),
            # CMLIF(256),
            # CMVLIF(256),
            # CMSLIF(256),
            # CMSVLIF(256),
            # SAMLIF(256),
            # MVALIF(inchannel=256),
            # MVLIF(inchannel=256),
            # VEILIF(inchannel=256),
            # DDLIF(),
            # MALIF(),
            DropBlockLIF(),
            # DBLIF(),
            # WTALIF(),
            # AVGConMLIF(inchannel=256),
            nn.Conv2d(256, 256, 3, 1, 1, bias=False),
            nn.BatchNorm2d(256),
            # LIF(),
            # DropLIF(),
            # CMILIF(256),
            # CMIVLIF(256),
            # CMLIF(256),
            # CMVLIF(256),
            # CMSLIF(256),
            # CMSVLIF(256),
            # SAMLIF(256),
            # MVALIF(inchannel=256),
            # MVLIF(inchannel=256),
            # VEILIF(inchannel=256),
            # DDLIF(),
            # MALIF(),
            DropBlockLIF(),
            # DBLIF(),
            # WTALIF(),
            # AVGConMLIF(inchannel=256),
            nn.AvgPool2d(2),

            nn.Conv2d(256, 512, 3, 1, 1, bias=False),
            nn.BatchNorm2d(512),
            # LIF(),
            # DropLIF(),
            # CMILIF(512),
            # CMIVLIF(512),
            # CMLIF(512),
            # CMVLIF(512),
            # CMSLIF(512),
            # CMSVLIF(512),
            # SAMLIF(512),
            # MVALIF(inchannel=512),
            # MVLIF(inchannel=512),
            # VEILIF(inchannel=512),
            # DDLIF(),
            # MALIF(),
            DropBlockLIF(),
            # DBLIF(),
            # WTALIF(),
            # AVGConMLIF(inchannel=512),
            nn.Conv2d(512, 512, 3, 1, 1, bias=False),
            nn.BatchNorm2d(512),
            # LIF(),
            # DropLIF(),
            # CMILIF(512),
            # CMIVLIF(512),
            # CMLIF(512),
            # CMVLIF(512),
            # CMSLIF(512),
            # CMSVLIF(512),
            # SAMLIF(512),
            # MVALIF(inchannel=512),
            # MVLIF(inchannel=512),
            # VEILIF(inchannel=512),
            # DDLIF(),
            # MALIF(),
            DropBlockLIF(),
            # DBLIF(),
            # WTALIF(),
            # AVGConMLIF(inchannel=512),
            nn.AvgPool2d(2),

            nn.Conv2d(512, 512, 3, 1, 1, bias=False),
            nn.BatchNorm2d(512),
            # LIF(),
            # DropLIF(),
            # CMILIF(512),
            # CMIVLIF(512),
            # CMLIF(512),
            # CMVLIF(512),
            # CMSLIF(512),
            # CMSVLIF(512),
            # SAMLIF(512),
            # MVALIF(inchannel=512),
            # MVLIF(inchannel=512),
            # VEILIF(inchannel=512),
            # DDLIF(),
            # MALIF(),
            DropBlockLIF(),
            # DBLIF(),
            # WTALIF(),
            # AVGConMLIF(inchannel=512),
            nn.Conv2d(512, 512, 3, 1, 1, bias=False),
            nn.BatchNorm2d(512),
            # LIF(),
            # DropLIF(),
            # CMILIF(512),
            # CMIVLIF(512),
            # CMLIF(512),
            # CMSLIF(512),
            # CMSVLIF(512),
            # SAMLIF(512),
            # CMVLIF(512),
            # MVALIF(inchannel=512),
            # MVLIF(inchannel=512),
            # VEILIF(inchannel=512),
            # DDLIF(),
            # MALIF(),
            DropBlockLIF(),
            # DBLIF(),
            # WTALIF(),
            # AVGConMLIF(inchannel=512),
            nn.AdaptiveAvgPool2d(1),
        )
        self.classifier = nn.Sequential(
            nn.Linear(512, num_classes, bias=False),
        )
        for m in self.modules():
            if isinstance(m, nn.Linear) or isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)

    def forward(self, x):
        x = self.avgpool_input(x)
        out = self.feature(x)

        out = out.view(out.shape[0], -1)
        out = self.classifier(out)
        return out
